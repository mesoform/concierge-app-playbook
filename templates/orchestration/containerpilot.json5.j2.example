/*
Application Orchestration for a Concierge Managed Application
http://www.mesoform.com/blog-listing/info/the-concierge-paradigm
*/
{
  consul: 'localhost:8500',
  logging: {
    level: {% raw %}'{{ .LOG_LEVEL }}'{% endraw %},
    format: {% raw %}'{{ .LOG_FORMAT }}'{% endraw %}
  },
  jobs: [
    {
      name: 'platform-integration-setup',
      exec: '/usr/local/bin/platform_integration.sh setup'
    },
    {
      name: 'consul-agent',
      restarts: 'unlimited',
      stopTimeout: '5s',
{% if svc_discovery is defined %}
      exec: [
        '/usr/local/bin/consul', 'agent',
        '-config-dir=/etc/coprocesses/consul',
        '-data-dir=/var/lib/consul',
        '-rejoin',
        '-retry-join', '{% raw %}{{ .SVC_DISCOVERY }}{% endraw %}',
        '-retry-max', '10',
        '-retry-interval', '10s'
      ],
{% else %}
      exec: [
        '/usr/local/bin/consul', 'agent',
        '-server',
        '-dev',
        '-join', 'localhost'
      ],
{% endif %}
      when: {
        source: 'platform-integration-setup',
        once: 'exitSuccess'
      },
      health: {
        exec: 'curl --fail -Ss http://localhost:8500',
        interval: 5,
        ttl: 10,
        timeout: 2
      }
    },
    {
      name: 'leave-consul',
      exec: 'consul leave',
      when: {
        source: 'consul-agent',
        once: 'stopping'
      }
    },
{% if pre_start is defined %}
    {
      name: 'pre-start',
      exec: '{{ pre_start }}',
      when: {
        source: 'watch.{{ upstreams | last }}',
        once: 'healthy'
      }
    },
{% endif %}
{% if event_management is defined %}
    {
      name: 'scheduling-status-healthy',
      exec: ['zabbix_sender',
        '-c', '/etc/coprocesses/zabbix/zabbix_agentd.conf',
        '--key', 'container.state',
        '--value', '1'],
      when: {
        source: '{{ project_name }}',
        each: 'healthy'
      }
    },
    {
      name: 'zabbix-agent',
      exec: ['/usr/sbin/zabbix_agentd',
              '-fc',
              '/etc/coprocesses/zabbix/zabbix_agentd.conf'
      ],
      restarts: 'unlimited',
      health: {
        exec: 'zabbix_agentd -t agent.ping',
        interval: 30,
        ttl: 60,
        timeout: 5
      },
      when: {
        source: 'platform-integration-setup',
        once: 'exitSuccess'
      }
    },
    {
      name: 'post-stop',
      exec: ['zabbix_sender',
             '-c', '/etc/coprocesses/zabbix/zabbix_agentd.conf',
             '--key', 'container.state',
             '--value', '0'],
      when: {
        once: 'shutdown'
      }
    },
{% endif %}
    {
      name: '{{ project_name }}',
      exec: {% raw %}'{{ .COMMAND }}'{% endraw %},
      restarts: 3,
{% if service_port is defined %}
      port: '{{ service_port }}',
{% endif %}
      health: {
        exec: '{{ healthcheck }}',
        interval: {{ healthcheck_interval | default(default_healthcheck_interval) }},
        ttl: {{ healthcheck_ttl | default(default_healthcheck_ttl) }},
        timeout: {{ healthcheck_timeout | default(default_healthcheck_timeout) }},
      },
      tags: [
{% for tag in service_tags %}
{% if not loop.last %}
        '{{ tag }}',
{% else %}
        '{{ tag }}'
{% endif %}
{% endfor %}
      ],
      consul: {
        enableTagOverride: true,
        deregisterCriticalServiceAfter: '10m'
      },
{% if pre_start is defined %}
      when: {
        source: 'pre-start',
        once: 'exitSuccess'
      }
{% else %}
      when: {
        source: 'platform-integration-setup',
        once: 'exitSuccess'
      }
{% endif %}
    },
{% if upstreams is defined %}
{% for upstream in upstreams %}
    {
      name: 'on-change-{{ upstream }}',
      exec: '{{ reload }}',
      when: {
        source: 'watch.{{ upstream }}',
        each: 'changed'
      }
    },
{% endfor %}
{% endif %}
  ],
  watches: [
{% if upstreams is defined %}
{% for upstream in upstreams %}
    {
    name: '{{ upstream }}',
      interval: 3
    },
{% endfor %}
{% endif %}
  ]
}
